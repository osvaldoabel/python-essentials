from typing import Protocol

class ListProtocol(Protocol):
    def __init__(self, capacity: int = 4): ...
    """Initializes the list with an optional initial capacity."""

    def __len__(self) -> int: ...
    """Returns the current number of elements in the list."""

    def is_empty(self) -> bool: ...
    """Returns True if the list is empty; otherwise, False."""

    def append(self, value) -> None: ...
    """Appends a single value to the end of the list."""

    def extend(self, values: list) -> None: ...
    """Appends all elements from another iterable (e.g. list) to the end."""

    def insert(self, index: int, value) -> None: ...
    """Inserts a value at the specified index, shifting elements to the right."""

    def remove_at(self, index: int): ...
    """Removes the element at the specified index and returns it."""

    def remove(self, value) -> None: ...
    """Removes the first occurrence of the given value from the list."""

    def pop(self, index: int = -1): ...
    """Removes and returns the element at the given index (default is last)."""

    def get(self, index: int): ...
    """Returns the value at the specified index."""

    def set(self, index: int, value) -> None: ...
    """Updates the value at the specified index."""

    def clear(self) -> None: ...
    """Removes all elements from the list."""

    def count(self, value) -> int: ...
    """Returns the number of times the given value appears in the list."""

    def index(self, value) -> int: ...
    """Returns the index of the first occurrence of the given value."""

    def reverse(self) -> None: ...
    """Reverses the elements of the list in place."""

    def sort(self) -> None: ...
    """Sorts the elements of the list in ascending order."""

    def copy(self): ...
    """Returns a shallow copy of the list."""

    def _resize(self, new_capacity: int) -> None: ...
    """Resizes the underlying storage array to a new capacity (internal use)."""

    def __getitem__(self, index: int): ...
    """Allows access using bracket notation: list[index]."""

    def __setitem__(self, index: int, value): ...
    """Allows assignment using bracket notation: list[index] = value."""

    def __str__(self) -> str: ...
    """Returns a string representation of the list."""

    def __iter__(self): ...
    """Returns an iterator over the list's elements."""

    def __eq__(self, other) -> bool: ...
    """Checks equality between this list and another."""
